= Intro to Ruby Meta-Programming

A collection of notes, codes and various further readings that accompanied the December 12th Hackday event.

== What is Ruby meta-programming?

Using one's understanding of the Ruby object model to create methods in the "right place" based on decisions made at runtime.

Using Ruby's interpreted environment to create code based on runtime decisions.

== Object Model

=== Objects

link://gotascii/metaprogramming/blob/master/object_model/01.rb

* State and the things that can be done to that state define an object.
* Lots of Person objects can be created each with their own state.
* Every Person has same set of methods.
* Adding/changing a method on the Person class has to apply to all person instances.
* Inefficient to put the methods in the instances.
* Objects contain a pointer to its class that has a list of methods.
* In order to call a method, Ruby looks up class then method.
* Draw classes to the right, so first step to find a method is "go right".

=== Self

link://gotascii/metaprogramming/blob/master/object_model/02.rb

* Self always references current object.
* What is the "current object"?
* The default receiver of method calls.
* Location of instance variables.
* "Every line of code is executed against a particular self." - Katz

How does self get set?

One way is to call a method with an explicit receiver.

1. Switch self to receiver
2. Lookup method is self's class
3. Invoke the method

"Go to the right." link://gotascii/metaprogramming/blob/master/object_model/02.rb

* Super contains a pointer to super class
* Method resolution follows this until it finds the method

"Go to the right then up." link://gotascii/metaprogramming/blob/master/object_model/03.rb

=== Metaclasses (anonymous, singleton, ...)

link://gotascii/metaprogramming/blob/master/object_model/04.rb

* Every object gets its own invisible class, called a metaclass.
* We can get to the class using class << obj
* def has a feature, when called with an object it adds the method to the metaclass.

link://gotascii/metaprogramming/blob/master/object_model/05.rb

* Even with the presence of this metaclass, the above rules still apply!

=== Classes

link://gotascii/metaprogramming/blob/master/object_model/06.rb

* Classes are instances of class Class.
* Provide a place to store method implementation for instances.
* Class names are constants that point to a class instances.

link://gotascii/metaprogramming/blob/master/object_model/07.rb

* Class definition is another way to change self.
* Inside class definition self changes to instance of the class.
* Since classes are just instances, all of the method resolution rules we talked about apply.

link://gotascii/metaprogramming/blob/master/object_model/08.rb

* Class methods are methods on a classes metaclass.
* This means there are no "class methods" in ruby!

link://gotascii/metaprogramming/blob/master/object_model/09.rb

== Modules

link://gotascii/metaprogramming/blob/master/object_model/10.rb

* Can have no instances.
* Can have no subclasses.
* It is an instance of Module.
* Switches self to current module instance, just like class.
* Provides a place to store and share (mixin) methods.

=== Include

link://gotascii/metaprogramming/blob/master/object_model/11.rb

* Creates an invisible class that proxies method lookups to the module
* Makes the class the receiver's immediate superclass.
* Include is a private method.

=== Extend

link://gotascii/metaprogramming/blob/master/object_model/12.rb

* Adds the invisible class to the receiver's metaclass.
* Extend is a public method.

=== Callbacks & ClassMethods

link://gotascii/metaprogramming/blob/master/object_model/13.rb

* Modules can define module methods that are called whenever they are included or used to extended.

link://gotascii/metaprogramming/blob/master/object_model/14.rb

* In order to extend a class when you include a module use the ClassMethods technique.

== Macros

link://gotascii/metaprogramming/blob/master/meta/macros/01.rb

* Attr methods are defined on the Module class, can be used whenever.
* Self is a class or module.
* They 'look' like keywords, but are actually class methods used in class definition.

=== Create a macro through a class method

link://gotascii/metaprogramming/blob/master/meta/macros/02.rb

* Since self.name is being defined on the class it can then be used as a macro within that class.

=== Create a macro through a module

link://gotascii/metaprogramming/blob/master/meta/macros/03.rb
link://gotascii/metaprogramming/blob/master/meta/macros/04.rb

* Person class is being extended with Speech module, all instance level methods on Speech are now class methods on Person.
* Speech module now has a hook method 'included' on it, this method will take the class including Speech and call extend ClassMethods on that class, thereby extending Person to have the class method say.

== Further Reading

http://ruby-metaprogramming.heroku.com
An online meta-programming course.

http://pragprog.com/screencasts/v-dtrubyom/the-ruby-object-model-and-metaprogramming
Commercial screencasts on meta-programming by Dave Thomas.

http://pragprog.com/titles/ppmetr/metaprogramming-ruby
A whole book on this stuff.

http://yehudakatz.com/2009/11/15/metaprogramming-in-ruby-its-all-about-the-self
A concise summary of meta-programming in Ruby by Yehuda Katz.