    e. Classes
      Classes are instances of class Class.
      Provide a place to store method implementation for instances.

      # 06.rb

      Class names are constants that point to a class instances.

      # 07.rb

      Class definition is another way to change self.
      Inside class definition self changes to instance of the class.
      Since classes are just instances, all of the method resolution rules we talked about apply.

      # 08.rb

      # ~ class metalcass

      This means there are no "class methods" in ruby!
      Class methods are methods on a classes metaclass.

      # 09.rb

  II. Modules
    a. Modules
      Can have no instances.
      Can have no subclasses.
      It is an instance of Module.
      Switches self to current module instance, just like class.
      Provides a place to store and share (mixin) methods.

      # 10.rb

    b. Include
      Creates an invisible class that proxies method lookups to the module
      Makes the class the receiver's immediate superclass.
      Include is a private method.

      # 11.rb
      # ~

    c. Extend
      Adds the invisible class to the receiver's metaclass.
      Extend is a public method.

      # ~
      # 12.rb

    d. Callbacks & ClassMethods
      Modules can define module methods that are called whenever they are included or used to extended.

      # 13.rb

      In order to extend a class when you include a module use the ClassMethods technique.
      
      # 14.rb